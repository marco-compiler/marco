/// @mainpage Main Page 
///
/// @section intro Introduction
/// In order to generate proper error messages, we need to provide hints to the user if
/// an undeclared identifier is found. This is done in two steps:
/// - The first part is to get the list of plausible words that the user might have
///  intended to type, which depends on the context in which the word was typed. When an
///  error occurs, the global and variables symbol table in the lowring context are used 
///  to find which identifiers are of the correct type and visible from the current scope. 
///  The list of plausible words is then created inserting said identifiers and the built-in 
///  identifiers of the respective type.
/// - The second part is to infer which of the plausible words is the most likely
///  intended word. In this case, we need to understand if the user made a typo or
///  if they intended to type a different word, which had semantic similarity to the
///  typed one.
///
/// To achieve this, we use two different distance metrics: a Damerau-Levenshtein-inspired
/// distance metric and a semantic distance metric, following the paper "Sentence similarity
/// based on semantic nets and corpus statistics" by Li, McLean, Bandar, O'Shea, Crockett.
/// The first metric is a first step to immediately understand if the user made an actual
/// typo, and is based only on syntactic properties. Each word is assigned a "distance" 
/// to the typed word, and if the smallest distance is below a certain threshold, we can infer 
/// that the user made a typo and suggest the word with the smallest distance. Only if the 
/// smallest distance is above the threshold do we use the more algorithmically expensive 
/// semantic distance metric. Moreover, if the semantic distance fails due to a faulty
/// wordnet installation, the result using the distance metric is kept.
///
/// @section syntactic Syntactic Distance
/// The edit distance metric is based only on syntactic properties of the two compared words.
/// The metric is known as the optimal string alignment distance, modified to use custom weights
/// for edit operations. The idea behind this metric is that the distance between two words is 
/// calculated finding the sequence of operations to transform one word into the other which
/// has the lowest cost among the possible ones, using the operations of insertion, deletion
/// and substitution of a character and trasposition of two characters. It is based on the 
/// well-known Levenshtein distance, with the addition of the trasposition operation.
///
/// @section semantic Semantic Distance
/// The semantic distance metric is based on exploring the graph of synsets in WordNet.
/// Since more words can have the same meaning and the same word can have multiple meanings,
/// the concept of synsets is used to group words in a more meaningful way. One particular
/// relationship between synsets is the hypernym relationship, which we exploit to calculate
/// the semantic distance between two words. A synset's hypernym is a more general concept
/// that encompasses the synset itself. For example, the synset "dog" has the hypernym "canine",
/// which in turn has the hypernym "mammal". Given two synsets, we can calculate their similarity
/// by finding the lowest common hypernym and calculating the distance between the two synsets
/// and the lowest common hypernym. More details can be found in the paper mentioned above,
/// as the full process is more complex, and also takes into account the distance of the least
/// common subsumer to the root of the graph, the prior probability of the synsets, and the
/// actual combination of words in order to compose a sentence, which in our case is a variable
/// name.
///
/// @section classes Class Overview
/// The IdentifierError class is the main class that is used to fix the best suggestion for
/// a given word. After checking the edit distance, it uses the SentenceDistanceCalculator class 
/// to calculate the semantic distance between two words.
/// The SentenceDistanceCalculator class uses the WordDistanceCalculator class to calculate
/// the distance between two variables, which may be compositions of multiple words. The 
/// WordDistanceCalculator class uses the DatabaseReader class to interface with the custom 
/// database that contains the WordNet graph.
///
/// @image html class-diagram.png
